1A.)  "Determine the Big O for the following algorithm: You are sitting in a room with 15 people. You want to find a playmate for your dog, preferably of the same breed. So you want to know if anyone out of the 15 people have the same breed as your dog. You stand up and yell out, who here has a golden retriever and would like to be a playdate for my golden. Someone yells - "I do, be happy to bring him over"  

Considering that the person is shouting out to all dog owners, I assume this would ne O(1) because there is only one interation.  That said, this scenario could be argued multiple ways...

1B.)  "Determine the Big O for the following algorithm: You are sitting in a room with 15 people. You want to find a playmate for your dog who is of the same breed. So you want to know if anyone out of the 15 people have the same breed as your dog. You start with the first person and ask him if he has a golden retriever. He says no, then you ask the next person, and the next, and the next until you find someone who has a golden or there is no one else to ask."

When you ask each person individually, you are iterating N times.  O(n)


2.)  
function isEven(value) {
    if (value % 2 == 0) {
        return true;
    }
    else
        return false;
    }
}

It appears that one value is fed into, thus O(1)


3.)  
function areYouHere(arr1, arr2) {
    for (let i = 0; i < arr1.length; i++) {
        const el1 = arr1[i];
        for (let j = 0; j < arr2.length; j++) {
            const el2 = arr2[j];
            if (el1 === el2) return true;
        }
    }
    return false;
}

The first for loop will have to run n number of times, but it also contains a second for loop which will also run n number of times, thus O(n^2)


4.)  
function doubleArrayValues(array) {
    for (let i = 0; i < array.length; i++) {
        array[i] *= 2;
    }
    return array;
}

If the array is of length n, the algorithm will iterate n times, thus O(n).


5.)
function naiveSearch(array, item) {
    for (let i = 0; i < array.length; i++) {
        if (array[i] === item) {
            return i;
        }
    }
}

While the interation count will varry greatly based upon randomness, in the worst case scenario this algorithm will find "item" at the last index in the array, thus O(n).

6.)
function createPairs(arr) {  //assume arr length 10
    for (let i = 0; i < arr.length; i++) {
        for(let j = i + 1; j < arr.length; j++) {
            console.log(arr[i] + ", " +  arr[j] );
        }
    }
}

While the second for loop is not running arr.length times on each interation, it is still running multiple times based upon the length of "arr", thus the closest Big O notation is O(n^2)

7.) function compute(num) {
    let result = [];
    for (let i = 1; i <= num; i++) {

        if (i === 1) {
            result.push(0);
        }
        else if (i == 2) {
            result.push(1);
        }
        else {
            result.push(result[i - 2] + result[i - 3]);
        }
    }
    return result;
}
result[3]+result[2]

Assuming the compute is being called with argumnet passing num as 10, the output being 
 [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] it clear that fibonacci sequences. It's time complexity 
 is O(n) where runtime is increasing equally as the dataset increases.


8.
function efficientSearch(array, item) {
    let minIndex = 0;
    let maxIndex = array.length - 1;
    let currentIndex;
    let currentElement;

    while (minIndex <= maxIndex) {
        currentIndex = Math.floor((minIndex + maxIndex) / 2);
        currentElement = array[currentIndex];

        if (currentElement < item) {
            minIndex = currentIndex + 1;
        }
        else if (currentElement > item) {
            maxIndex = currentIndex - 1;
        }
        else {
            return currentIndex;
        }
    }
    return -1;
}
The time complexity is O(log(n)) because as the 
input dataset is increasing the runtime is reduced 
due the fact that each iteration half remaining dataset.

9. 
function findRandomElement(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}

The time complexity is O(n) because its take n number
guess to success the n. 

10. function isWhat(n) {
    if (n < 2 || n % 1 != 0) {
        return false;
    }
    for (let i = 2; i < n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}
 The time complexity is  O(n) because if the number is prime it will iterate the 
 for loop n times. 
13. Recursive Big O

 1. 
The time complexity O(n) is linear because the number of n times sheep
enters is directly propartional to the numbe of times it output the result statement.

2. 

The time complexity O(n) is linear because when the exponent increase the iteration increases
equally.

3. 
The time complexity O(n) is linear because number of characters in the string directly proportional 
to equal number of iteration to reverse the character in the string.

4. 
The time complexity 0(n) is linear because with increament in the number is proportional to the output number.

5.
The time complexity 0(n) is linear because with increament in the number is proportional to the output number.

6.
The time complexity 0(2^n) is exponential because with increase in input rapidly increase the run time.

7.
The time complexity 0(n) is linear because with increament in the number is proportional to the output number.



14. Iterative Big O

  1. 
The time complexity O(n) is linear because the number of n times sheep
enters is directly propartional to the numbe of times it output the result statement.

2. 

The time complexity O(n) is linear because when the exponent increase the iteration increases
equally.

3. 
The time complexity O(n) is linear because number of characters in the string directly proportional 
to equal number of iteration to reverse the character in the string.

4. 
The time complexity 0(n) is linear because with increament in the number is proportional to the output number.

5.
The time complexity 0(n) is linear because with increament in the number is proportional to the output number.

6.
The time complexity 0(n) is linear because with increament in the number is proportional to the output number.

7.
The time complexity 0(n) is linear because with increament in the number is proportional to the output number.














